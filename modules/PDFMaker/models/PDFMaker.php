<?php
/**
 * This file is part of Defalto – a CRM software developed by IT-Solutions4You s.r.o.
 *
 * (c) IT-Solutions4You s.r.o
 *
 * This file is licensed under the GNU AGPL v3 License.
 * See LICENSE-AGPLv3.txt for more details.
 */

class PDFMaker_PDFMaker_Model extends Vtiger_Module_Model
{
    public $log;
    public $db;
    private $version_type = 'Free';
    private $version_no;
    private $basicModules;
    private $pageFormats;

    function __construct()
    {
        PDFMaker_Debugger_Model::GetInstance()->Init();

        global $log;

        $this->log = $log;
        $this->db = PearDatabase::getInstance();

        $this->basicModules = ['20', '21', '22', '23'];
        $this->name = 'PDFMaker';
        $this->id = getTabId($this->name);

        $_SESSION['KCFINDER']['uploadURL'] = rtrim(vglobal('site_URL'), '/') . '/test/upload';
        $_SESSION['KCFINDER']['uploadDir'] = __DIR__ . '/../../../test/upload';
    }

    //ListView data
    public function GetListviewData()
    {
        $params = ['Invoice', 'Quotes', 'SalesOrder', 'PurchaseOrder'];
        $sql = 'SELECT vtiger_pdfmaker.templateid, vtiger_pdfmaker.description, vtiger_pdfmaker.module FROM vtiger_pdfmaker LEFT JOIN vtiger_pdfmaker_settings USING(templateid) WHERE module IN (?, ?, ?, ?)';
        $result = $this->db->pquery($sql, $params);
        $templates = [];

        while ($row = $this->db->fetchByAssoc($result)) {
            $templateModule = $row['module'];
            $templateId = $row['templateid'];
            $templates[] = [
                'templateid'  => $templateId,
                'description' => $row['description'],
                'module'      => vtranslate($templateModule, $templateModule),
                'edit_url'    => 'index.php?module=PDFMaker&view=EditFree&return_view=List&templateid="' . $templateId,
            ];
        }

        return $templates;
    }

    //DetailView data
    public function GetDetailViewData($templateid)
    {
        $R_Atr = [$templateid, 'SalesOrder', 'Invoice', 'Quotes', 'PurchaseOrder'];
        $sql = 'SELECT vtiger_pdfmaker.*, vtiger_pdfmaker_settings.* FROM vtiger_pdfmaker LEFT JOIN vtiger_pdfmaker_settings USING(templateid) WHERE vtiger_pdfmaker.templateid=? AND vtiger_pdfmaker.module IN (?, ?, ?, ?)';

        $result = $this->db->pquery($sql, $R_Atr);
        $pdftemplateResult = $this->db->fetch_array($result);

        $pdftemplateResult['templateid'] = $templateid;

        return $pdftemplateResult;
    }

    //EditView data
    public function GetEditViewData($templateid)
    {
        $sql = 'SELECT vtiger_pdfmaker.*, vtiger_pdfmaker_settings.*
    			FROM vtiger_pdfmaker
    			LEFT JOIN vtiger_pdfmaker_settings USING(templateid)
    			WHERE vtiger_pdfmaker.templateid=?';

        $result = $this->db->pquery($sql, [$templateid]);
        $pdftemplateResult = $this->db->fetch_array($result);

        return $pdftemplateResult;
    }

    //function for getting the mPDF object that contains prepared HTML output
    //returns the name of output filename - the file can be generated by calling mPDF->Output(..) method
    public function GetPreparedMPDF(&$mpdf, $record, $module, $language)
    {
        $focus = CRMEntity::getInstance($module);

        foreach ($focus->column_fields as $cf_key => $cf_value) {
            $focus->column_fields[$cf_key] = '';
        }

        $focus->retrieve_entity_info($record, $module);
        $focus->id = $record;

        $PDFContent = $this->GetPDFContentRef($module, $focus, $language);
        $Settings = $PDFContent->getSettingsForModule($module);

        $pdf_content = $PDFContent->getContent();

        $header_html = $pdf_content['header'];
        $body_html = $pdf_content['body'];
        $footer_html = $pdf_content['footer'];

        // we need to set orientation for mPDF constructor in case of Custom format (array(width, length)) as well as we need to
        // set orientation for <pagebreak ... /> contruction
        if ($Settings['orientation'] == 'landscape') {
            $orientation = 'L';
        } else {
            $orientation = 'P';
        }

        $format = $Settings['format'];  // variable $format used in mPDF constructor
        $formatPB = $format;            // variable $formatPB used in <pagebreak ... /> contruction

        if (strpos($format, ';') > 0) {
            $tmpArr = explode(';', $format);
            $format = [$tmpArr[0], $tmpArr[1]];
            $formatPB = $format[0] . 'mm ' . $format[1] . 'mm';
        } elseif ($Settings['orientation'] == 'landscape') {
            $format .= '-L';
            $formatPB .= '-L';
        }

        $config = [
            'mode'              => '',
            'format'            => $format,
            'default_font_size' => 0,
            'default_font'      => '',
            'margin_left'       => $Settings['margin_left'],
            'margin_right'      => $Settings['margin_right'],
            'margin_top'        => 0,
            'margin_bottom'     => 0,
            'margin_header'     => $Settings['margin_top'],
            'margin_footer'     => $Settings['margin_bottom'],
            'orientation'       => $orientation,
        ];
        $mpdf = new PDFMaker_MPDF_Model($config);

        $this->mpdf_prepare_header_footer_settings($mpdf, $Settings);

        $mpdf->SetHTMLHeader($header_html);
        $mpdf->SetHTMLFooter($footer_html);
        $mpdf->WriteHTML($body_html);

        $name = $this->GenerateName($record, $module);

        $name = str_replace([' ', '/', ','], ['-', '-', '-'], $name);

        return $name;
    }

    public function GetPDFContentRef($module, $focus, $language)
    {
        return new PDFMaker_PDFContent_Model($module, $focus, $language);
    }

    private function mpdf_prepare_header_footer_settings(&$mpdf, &$Settings)
    {
        $disp_header = $Settings['disp_header'];
        $disp_optionsArr = ['dh_first', 'dh_other'];
        $disp_header_bin = str_pad(base_convert($disp_header, 10, 2), 2, '0', STR_PAD_LEFT);

        for ($i = 0; $i < count($disp_optionsArr); $i++) {
            if (substr($disp_header_bin, $i, 1) == '1') {
                $mpdf->PDFMakerDispHeader[$disp_optionsArr[$i]] = true;
            } else {
                $mpdf->PDFMakerDispHeader[$disp_optionsArr[$i]] = false;
            }
        }

        $disp_footer = $Settings['disp_footer'];
        $disp_optionsArr = ['df_first', 'df_last', 'df_other'];
        $disp_footer_bin = str_pad(base_convert($disp_footer, 10, 2), 3, '0', STR_PAD_LEFT);

        for ($i = 0; $i < count($disp_optionsArr); $i++) {
            if (substr($disp_footer_bin, $i, 1) == '1') {
                $mpdf->PDFMakerDispFooter[$disp_optionsArr[$i]] = true;
            } else {
                $mpdf->PDFMakerDispFooter[$disp_optionsArr[$i]] = false;
            }
        }
    }

    public function GenerateName($record, $module)
    {
        $templates = [];
        $focus = CRMEntity::getInstance($module);
        $focus->retrieve_entity_info($record, $module);

        $module_tabid = getTabId($module);
        $result = $this->db->pquery('SELECT fieldname FROM vtiger_field WHERE uitype=? AND tabid=?', ['4', $module_tabid]);
        $fieldname = $this->db->query_result($result, 0, 'fieldname');

        if (isset($focus->column_fields[$fieldname]) && $focus->column_fields[$fieldname] != '') {
            $name = $this->generate_cool_uri($focus->column_fields[$fieldname]);
        } else {
            $templatesStr = implode('_', $templates);
            $recordsStr = implode('_', $record);
            $name = $templatesStr . $recordsStr . date('ymdHi');
        }

        return $name;
    }

    function generate_cool_uri($name)
    {
        $Search = [
            '$',
            '€',
            '&',
            '%',
            ')',
            '(',
            '.',
            ' - ',
            '/',
            ' ',
            ',',
            'ľ',
            'š',
            'č',
            'ť',
            'ž',
            'ý',
            'á',
            'í',
            'é',
            'ó',
            'ö',
            'ů',
            'ú',
            'ü',
            'ä',
            'ň',
            'ď',
            'ô',
            'ŕ',
            'Ľ',
            'Š',
            'Č',
            'Ť',
            'Ž',
            'Ý',
            'Á',
            'Í',
            'É',
            'Ó',
            'Ú',
            'Ď',
            '"',
            '°',
            'ß'
        ];
        $Replace = [
            '',
            '',
            '',
            '',
            '',
            '',
            '-',
            '-',
            '-',
            '-',
            '-',
            'l',
            's',
            'c',
            't',
            'z',
            'y',
            'a',
            'i',
            'e',
            'o',
            'o',
            'u',
            'u',
            'u',
            'a',
            'n',
            'd',
            'o',
            'r',
            'l',
            's',
            'c',
            't',
            'z',
            'y',
            'a',
            'i',
            'e',
            'o',
            'u',
            'd',
            '',
            '',
            'ss'
        ];
        $return = str_replace($Search, $Replace, $name);

        // echo $return;
        return $return;
    }

    public function DeleteAllRefLinks()
    {
        require_once('vtlib/Vtiger/Link.php');
        $link_res = $this->db->pquery('SELECT tabid FROM vtiger_tab WHERE isentitytype=?', ['1']);

        while ($link_row = $this->db->fetchByAssoc($link_res)) {
            Vtiger_Link::deleteLink($link_row['tabid'], 'DETAILVIEWWIDGET', 'PDFMaker');
            Vtiger_Link::deleteLink($link_row['tabid'], 'LISTVIEWMASSACTION', 'PDF Export', 'javascript:getPDFListViewPopup2(this,\'$MODULE$\');');
        }
    }

    public function actualizeLinks()
    {
        $this->AddHeaderLinks();
    }

    public function AddHeaderLinks()
    {
        require_once('vtlib/Vtiger/Module.php');

        $link_module = Vtiger_Module::getInstance('PDFMaker');
        $link_module->addLink('HEADERSCRIPT', 'PDFMakerJS', 'layouts/v7/modules/PDFMaker/resources/PDFMakerActions.js', '', '1');
    }

    public function GetProductBlockFields($select_module = '')
    {
        $current_user = Users_Record_Model::getCurrentUserModel();
        $result = [];
        //Product block
        $Article_Strings = [
            ''                                                  => vtranslate('LBL_PLS_SELECT', 'PDFMaker'),
            vtranslate('LBL_PRODUCTS_AND_SERVICES', 'PDFMaker') => [
                'PRODUCTBLOC_START' => vtranslate('LBL_ARTICLE_START', 'PDFMaker'),
                'PRODUCTBLOC_END'   => vtranslate('LBL_ARTICLE_END', 'PDFMaker')
            ],
            vtranslate('LBL_PRODUCTS_ONLY', 'PDFMaker')         => [
                'PRODUCTBLOC_PRODUCTS_START' => vtranslate('LBL_ARTICLE_START', 'PDFMaker'),
                'PRODUCTBLOC_PRODUCTS_END'   => vtranslate('LBL_ARTICLE_END', 'PDFMaker')
            ],
            vtranslate('LBL_SERVICES_ONLY', 'PDFMaker')         => [
                'PRODUCTBLOC_SERVICES_START' => vtranslate('LBL_ARTICLE_START', 'PDFMaker'),
                'PRODUCTBLOC_SERVICES_END'   => vtranslate('LBL_ARTICLE_END', 'PDFMaker')
            ],
        ];
        $result['ARTICLE_STRINGS'] = $Article_Strings;

        //Common fields for product and services
        $Product_Fields = [
            'PS_CRMID'               => vtranslate('LBL_RECORD_ID', 'PDFMaker'),
            'PS_NO'                  => vtranslate('LBL_PS_NO', 'PDFMaker'),
            'PRODUCTPOSITION'        => vtranslate('LBL_PRODUCT_POSITION', 'PDFMaker'),
            'CURRENCYNAME'           => vtranslate('LBL_CURRENCY_NAME', 'PDFMaker'),
            'CURRENCYCODE'           => vtranslate('LBL_CURRENCY_CODE', 'PDFMaker'),
            'CURRENCYSYMBOL'         => vtranslate('LBL_CURRENCY_SYMBOL', 'PDFMaker'),
            'PRODUCTNAME'            => vtranslate('LBL_VARIABLE_PRODUCTNAME', 'PDFMaker'),
            'PRODUCTTITLE'           => vtranslate('LBL_VARIABLE_PRODUCTTITLE', 'PDFMaker'),
            'PRODUCTEDITDESCRIPTION' => vtranslate('LBL_VARIABLE_PRODUCTEDITDESCRIPTION', 'PDFMaker'),
            'PRODUCTDESCRIPTION'     => vtranslate('LBL_VARIABLE_PRODUCTDESCRIPTION', 'PDFMaker')
        ];

        $result3 = $this->db->query("SELECT tabid FROM vtiger_tab WHERE name='Pdfsettings'");
        if ($this->db->num_rows($result3) > 0) {
            $Product_Fields['CRMNOWPRODUCTDESCRIPTION'] = vtranslate('LBL_CRMNOW_DESCRIPTION', 'PDFMaker');
        }

        $Product_Fields['PRODUCTQUANTITY'] = vtranslate('LBL_VARIABLE_QUANTITY', 'PDFMaker');
        $Product_Fields['PRODUCTUSAGEUNIT'] = vtranslate('LBL_VARIABLE_USAGEUNIT', 'PDFMaker');
        $Product_Fields['PRODUCTLISTPRICE'] = vtranslate('LBL_VARIABLE_LISTPRICE', 'PDFMaker');
        $Product_Fields['PRODUCTTOTAL'] = vtranslate('LBL_PRODUCT_TOTAL', 'PDFMaker');
        $Product_Fields['PRODUCTDISCOUNT'] = vtranslate('LBL_VARIABLE_DISCOUNT', 'PDFMaker');
        $Product_Fields['PRODUCTDISCOUNTPERCENT'] = vtranslate('LBL_VARIABLE_DISCOUNT_PERCENT', 'PDFMaker');
        $Product_Fields['PRODUCTSTOTALAFTERDISCOUNT'] = vtranslate('LBL_VARIABLE_PRODUCTTOTALAFTERDISCOUNT', 'PDFMaker');
        $Product_Fields['PRODUCTVATPERCENT'] = vtranslate('LBL_PRODUCT_VAT_PERCENT', 'PDFMaker');
        $Product_Fields['PRODUCTVATSUM'] = vtranslate('LBL_PRODUCT_VAT_SUM', 'PDFMaker');
        $Product_Fields['PRODUCTTOTALSUM'] = vtranslate('LBL_PRODUCT_TOTAL_VAT', 'PDFMaker');

        if ($select_module != '') {
            $sql1 = 'SELECT * FROM vtiger_inventorytaxinfo';
            $result1 = $this->db->pquery($sql1, []);

            while ($row1 = $this->db->fetchByAssoc($result1)) {
                $Taxes[$row1['taxname']] = $row1['taxlabel'];
            }

            $select_moduleid = getTabid($select_module);

            $sql2 = "SELECT fieldname, fieldlabel, uitype FROM vtiger_field WHERE tablename = ? AND tabid = ? AND fieldname NOT IN ('productid','quantity','listprice','comment','discount_amount','discount_percent')";
            $result2 = $this->db->pquery($sql2, ['vtiger_inventoryproductrel', $select_moduleid]);

            while ($row2 = $this->db->fetchByAssoc($result2)) {
                if ($row2['uitype'] == '83') {
                    $label = vtranslate('Tax');
                    $label .= ' (';
                    $label .= vtranslate($Taxes[$row2['fieldname']], $select_module);
                    $label .= ')';
                } else {
                    $label = vtranslate($row2['fieldlabel'], $select_module);
                }

                $Product_Fields['PRODUCT_' . strtoupper($row2['fieldname'])] = $label;
            }
        }
        $result['SELECT_PRODUCT_FIELD'] = $Product_Fields;

        //Available fields for products
        $prod_fields = [];
        $serv_fields = [];

        $in = getTabId('Products');
        $in .= ', ' . getTabId('Services');

        $sql = 'SELECT  t.tabid, t.name,
                        b.blockid, b.blocklabel,
                        f.fieldname, f.fieldlabel
                FROM vtiger_tab AS t
                INNER JOIN vtiger_blocks AS b USING(tabid)
                INNER JOIN vtiger_field AS f ON b.blockid = f.block
                WHERE t.tabid IN (' . $in . ')
                    AND (f.displaytype != 3 OR f.uitype = 55)
                ORDER BY t.name ASC, b.sequence ASC, f.sequence ASC, f.fieldid ASC';
        $res = $this->db->pquery($sql, []);

        while ($row = $this->db->fetchByAssoc($res)) {
            $module = $row['name'];
            $fieldname = $row['fieldname'];

            if (getFieldVisibilityPermission($module, $current_user->id, $fieldname) != '0') {
                continue;
            }

            $trans_field_nam = strtoupper($module) . '_' . strtoupper($fieldname);

            switch ($module) {
                case 'Products':
                    $trans_block_lbl = vtranslate($row['blocklabel'], 'Products');
                    $trans_field_lbl = vtranslate($row['fieldlabel'], 'Products');
                    $prod_fields[$trans_block_lbl][$trans_field_nam] = $trans_field_lbl;
                    break;

                case 'Services':
                    $trans_block_lbl = vtranslate($row['blocklabel'], 'Services');
                    $trans_field_lbl = vtranslate($row['fieldlabel'], 'Services');
                    $serv_fields[$trans_block_lbl][$trans_field_nam] = $trans_field_lbl;
                    break;

                default:
                    continue;
            }
        }

        $result['PRODUCTS_FIELDS'] = $prod_fields;
        $result['SERVICES_FIELDS'] = $serv_fields;

        return $result;
    }

    /**
     * Function to get the Quick Links for the module
     *
     * @param <Array> $linkParams
     *
     * @return <Array> List of Vtiger_Link_Model instances
     */
    public function getSideBarLinks($linkParams)
    {
        $currentUserModel = Users_Record_Model::getCurrentUserModel();

        $type = 'SIDEBARLINK';
        $quickLinks = [];

        if ($linkParams['ACTION'] == 'ProfilesPrivilegies') {
            $quickSLinks = [
                'linktype'  => 'SIDEBARLINK',
                'linklabel' => 'LBL_RECORDS_LIST',
                'linkurl'   => 'index.php?module=PDFMaker&view=List',
                'linkicon'  => ''
            ];

            $links['SIDEBARLINK'][] = Vtiger_Link_Model::getInstanceFromValues($quickSLinks);
        } elseif ($linkParams['ACTION'] == 'IndexAjax' && $linkParams['MODE'] == 'showSettingsList') {
            if ($currentUserModel->isAdminUser()) {
                $SettingsLinks = $this->GetAvailableSettings();

                foreach ($SettingsLinks as $stype => $sdata) {
                    $quickLinks[] = [
                        'linktype'  => 'SIDEBARLINK',
                        'linklabel' => $sdata['label'],
                        'linkurl'   => $sdata['location'],
                        'linkicon'  => ''
                    ];
                }
            }
        } else {
            $linkTypes = ['SIDEBARLINK', 'SIDEBARWIDGET'];
            $links = Vtiger_Link_Model::getAllByType($this->getId(), $linkTypes, $linkParams);

            $quickLinks[] = [
                'linktype'  => 'SIDEBARLINK',
                'linklabel' => 'LBL_RECORDS_LIST',
                'linkurl'   => $this->getListViewUrl(),
                'linkicon'  => '',
            ];
        }

        if (count($quickLinks) > 0) {
            foreach ($quickLinks as $quickLink) {
                $links[$type][] = Vtiger_Link_Model::getInstanceFromValues($quickLink);
            }
        }

        if ($currentUserModel->isAdminUser() && $linkParams['ACTION'] != 'Edit' && $linkParams['ACTION'] != 'Detail') {
            $quickS2Links = [
                'linktype'  => 'SIDEBARWIDGET',
                'linklabel' => 'LBL_SETTINGS',
                'linkurl'   => 'module=PDFMaker&view=IndexAjax&mode=showSettingsList&pview=' . $linkParams['ACTION'],
                'linkicon'  => ''
            ];
            $links['SIDEBARWIDGET'][] = Vtiger_Link_Model::getInstanceFromValues($quickS2Links);
        }

        return $links;
    }

    public function GetAvailableSettings()
    {
        $menu_array = [];

        return $menu_array;
    }

    public function getDetailViewLinks($templateid = '')
    {
        $linkTypes = ['DETAILVIEWTAB'];
        $detail_url = 'index.php?module=PDFMaker&view=DetailFree&templateid=' . $templateid . '&record=t' . $templateid;

        $detailViewLinks = [
            [
                'linktype'  => 'DETAILVIEWTAB',
                'linklabel' => vtranslate('LBL_PROPERTIES', 'PDFMaker'),
                'linkurl'   => $detail_url,
                'linkicon'  => ''
            ]
        ];

        foreach ($detailViewLinks as $detailViewLink) {
            $linkModelList['DETAILVIEWTAB'][] = Vtiger_Link_Model::getInstanceFromValues($detailViewLink);
        }

        return $linkModelList;
    }
}